{% extends "base.njk" %}

{% block content %}
{% markdown %}
# 3D Turtle Graphics

For one of my university honors courses (MATH 198), I had to build an RTICA
(Real-Time Interactive Computer Animation) for my final project. I ended up
building a browser-based 3D turtle graphics system. The original website I built
for the project is [here](http://new.math.uiuc.edu/math198/MA198-2015/nwalter2/index.html);
on the off-chance that website goes down in the future, I'm hosting a copy on
this site as well. Below is an excerpt from the original site.

<a class="btn btn-primary btn-raised" href="/files/projects/turtle/files/project/src/">Launch RTICA</a>
<a class="btn btn-raised" href="/files/projects/turtle/" style="white-space:normal;">View hosted copy of original site</a>

## Abstract

My project is a 3D turtle graphics application implemented using JavaScript and
HTML5. It works very similarly to a standard 2D turtle system, with the logical
extension that the turtle will be able to move along a third dimension. It also
allows the user to move the camera so as to be able to view the turtle's
drawings from different perspectives.

### RTICA

The RTICA is implementated as a single-page web application with HTML, JavaScript,
and the three.js graphics library. Users have two ways to enter commands.

 - The first is a "terminal"-like interface (REPL), where you can enter one line at a time.
 - The second allows you to type multiple lines of code at a time and then execute
 them all at once; this is ideal for scripting complex turtle behavior. All
 commands are entered as JavaScript code, which is then parsed and executed with
 JavaScript's eval(...) function.

### Commands

The turtle supports the following commands:

 - `move(distance)`: move forward/backwards
 - `goto(x, y, x)`: jump immediately to the location (x, y, z) without changing the turtle's orientation
 - `turn(degrees)`: turns right/left by the specified angle
 - `pitch(degrees)`: pitches up/down by the specifies angle
 - `roll(degrees)`: rolls clockwise/counterclockwise by the specified angle
 - `penup()`: prevents the turtle from making lines as it moves until a call to penup()
 - `pendown()`: makes the turtle draw lines as it moves
 - `replay()`: replays the turtle's commands
 - `status()`: prints out the turtle's position and orientation vectors
 - `reset()`: clears the turtle's path, resets its heading to the default, and positions the turtle at the origin
 - `hide()`: hides the turtle
 - `show()`: shows the turtle
 - `setMoveSpeed(speed)`: sets the speed at which the turtle moves, in units/sec
 - `setTurnSpeed(speed)`: sets the speed at which the turtle turns, in radians/sec

### Examples

The following code snippets demonstrate some interesting things that can be done
with the turtle. Most of these programs should be copy-pasted into the
"Text Input" tab on the RTICA; the example below labeled "direct commands"
should be entered line-by-line into the "Terminal" tab.

 ##### Draws a wireframe cube (direct commands)

```js
 // Draws base
 move(5).turn(90).move(5).turn(90).move(5).turn(90).move(5).turn(90)
 // Moves to top
 pitch(90).move(5).pitch(-90);
 // Draws top edges and lines connecting top and base
 move(5).pitch(-90).move(5).move(-5).pitch(90).turn(90)
 move(5).pitch(-90).move(5).move(-5).pitch(90).turn(90)
 move(5).pitch(-90).move(5).move(-5).pitch(90).turn(90)
 move(5)
```

 ##### Draws a wireframe cube (scripting)

```js
 var side = 3;
 // Draws base
 for(var i = 0; i < 4; i++) {
   move(side).turn(90);
 }
 // Moves to top
 pitch(90).move(side).pitch(-90);
 // Draws top edges and lines connecting top and base
 for(var i = 0; i < 4; i++) {
   move(side).pitch(-90).move(side).move(-side).pitch(90).turn(90);
 }
```

##### Draws a wireframe sphere (scripting)

```js
 var movelength = 0.5;
 var angle = 10;
 for(var i = 0; i < 18; i++) {
   for(var j = 0; j < 36; j++) {
     if(j == 0) {
       move(movelength/2);
     } else {
       move(movelength);
     }
     pitch(10);
   }
   move(movelength/2);
   turn(10);
 }
```

{% endmarkdown %}
{% endblock %}
